const express = require('express');

// Creación de routers
const router = express.Router();
const authProductRouter = express.Router();

// Importaciones de tus funciones de base de datos
// Asegúrate de tener estas funciones en tu proyecto
const {
  getProducts,
  createProduct,
  deleteProduct,
  updateProduct,
  getProductById
} = require('../database/products');

// Rutas
// Ruta para obtener todos los productos
router.get('/getProducts', async (req, res) => {
  try {
    const products = await getProducts();
    res.status(200).json(products);
  } catch (error) {
    res.status(500).send('Error al obtener los productos');
  }
});

// Ruta para obtener un producto por ID
router.get('/getProductById/:id', async (req, res) => {
  const { id } = req.params;
  try {
    const product = await getProductById(id);
    res.status(200).json(product);
  } catch (error) {
    res.status(500).send('Error al obtener el producto');
  }
});

// Ruta para crear un nuevo producto
router.post('/create', async (req, res) => {
  try {
    const { product_name, product_description, price, purchase_link, category_id } = req.body;

    // Extraer nombres de archivo de las imágenes y video si están presentes
    const imageNames = req.files['images'] ? req.files['images'].map(file => file.originalname) : [];
    const videoName = req.files['video'] ? req.files['video'][0].originalname : null;

    // Crear el producto en la base de datos
    const newProduct = await createProduct(
      product_name,
      product_description,
      imageNames[0] || null, // image1
      imageNames[1] || null, // image2
      imageNames[2] || null, // image3
      imageNames[3] || null, // image4
      imageNames[4] || null, // image5
      videoName,
      price,
      purchase_link,
      category_id
    );

    res.status(200).json(newProduct);
  } catch (error) {
    res.status(500).send('Error al crear el producto');
  }
});

// Ruta para actualizar un producto
router.put('/update/:id', upload.fields([{ name: 'images', maxCount: 5 }, { name: 'video', maxCount: 1 }]), async (req, res) => {
  const { id } = req.params;
  try {
    const { product_name, product_description, price, purchase_link, category_id } = req.body;

    // Extraer nombres de archivo de las imágenes y video si están presentes
    const imageNames = req.files['images'] ? req.files['images'].map(file => file.originalname) : [];
    const videoName = req.files['video'] ? req.files['video'][0].originalname : null;

    // Actualizar datos del producto
    const updatedProduct = await updateProduct(
      id,
      product_name,
      product_description,
      imageNames[0] || null, // image1
      imageNames[1] || null, // image2
      imageNames[2] || null, // image3
      imageNames[3] || null, // image4
      imageNames[4] || null, // image5
      videoName,
      price,
      purchase_link,
      category_id
    );

    res.status(200).json(updatedProduct);
  } catch (error) {
    console.error('Error al actualizar el producto:', error);
    res.status(500).send('Error al actualizar el producto');
  }
});


// Ruta para eliminar un producto
router.delete('/delete/:id', async (req, res) => {
  const { id } = req.params;
  try {
    // Eliminar el producto de la base de datos
    await deleteProduct(id);
    res.status(200).send('Producto eliminado con éxito');
  } catch (error) {
    console.error('Error al eliminar el producto:', error);
    res.status(500).send('Error al eliminar el producto');
  }
});


// Rutas adicionales...
// authProductRouter.get('/', ...);

module.exports = { productRouter: router, authProductRouter };
